// converted by version 1.3
// on Fri Nov 29 14:03:37 CET 2019

.package applet {
	.aid 0xA0:0x0:0x0:0x0:0x62:0x3:0x1:0xC:0x6;
	.version 1.0;

	.imports {
		0xA0:0x0:0x0:0x0:0x62:0x1:0x1 1.0;		//javacard/framework
	}

	.applet {
		0xA0:0x0:0x0:0x0:0x62:0x3:0x1:0xC:0x6:0x1 TheApplet;
	}

	.constantPool {
		// 0
		instanceFieldRef short TheApplet/SW_VERIFICATION_FAILED;
		// 1
		instanceFieldRef short TheApplet/SW_PIN_VERIFICATION_REQUIRED;
		// 2
		instanceFieldRef 0.9 TheApplet/pin;
		// 3
		classRef 0.9;		// javacard/framework/OwnerPIN
		// 4
		staticMethodRef 0.9.0(BB)V;		// javacard/framework/OwnerPIN.<init>(BB)V
		// 5
		staticMethodRef 0.3.0()V;		// javacard/framework/Applet.<init>()V
		// 6
		virtualMethodRef 0.9.8([BSB)V;		// javacard/framework/OwnerPIN.update([BSB)V
		// 7
		virtualMethodRef 0.3.1()V;		// javacard/framework/Applet.register()V
		// 8
		classRef TheApplet;
		// 9
		staticMethodRef TheApplet/<init>()V;
		// 10
		virtualMethodRef 0.9.2()B;		// javacard/framework/OwnerPIN.getTriesRemaining()B
		// 11
		virtualMethodRef 0.9.5()V;		// javacard/framework/OwnerPIN.reset()V
		// 12
		virtualMethodRef 0.10.6()S;		// javacard/framework/APDU.setIncomingAndReceive()S
		// 13
		virtualMethodRef 0.10.1()[B;		// javacard/framework/APDU.getBuffer()[B
		// 14
		virtualMethodRef 0.9.1([BSB)Z;		// javacard/framework/OwnerPIN.check([BSB)Z
		// 15
		staticMethodRef 0.7.1(S)V;		// javacard/framework/ISOException.throwIt(S)V
		// 16
		virtualMethodRef 0.9.4()Z;		// javacard/framework/OwnerPIN.isValidated()Z
		// 17
		staticFieldRef byte[] TheApplet/NVR;
		// 18
		staticMethodRef 0.16.1([BS[BSS)S;		// javacard/framework/Util.arrayCopy([BS[BSS)S
		// 19
		virtualMethodRef 0.10.8(SS)V;		// javacard/framework/APDU.setOutgoingAndSend(SS)V
		// 20
		virtualMethodRef TheApplet/verify(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

	}

	.class public TheApplet 0 extends 0.3 {		// extends javacard/framework/Applet

		.fields {
			 0.9 pin 0;		// Ljavacard/framework/OwnerPIN;
			 short SW_VERIFICATION_FAILED 1;		// S
			 short SW_PIN_VERIFICATION_REQUIRED 2;		// S
			static final byte BINARY_WRITE = -48;		// B
			static final byte BINARY_READ = -80;		// B
			static final byte SELECT = -92;		// B
			static final byte PIN_VERIFY = 32;		// B
			static final short NVRSIZE = 1024;		// S
			static byte[] NVR = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};		// [B
		}

		.publicMethodTable 4 {
			equals(Ljava/lang/Object;)Z;
			register()V;
			register([BSB)V;
			selectingApplet()Z;
			deselect()V;
			getShareableInterfaceObject(Ljavacard/framework/AID;B)Ljavacard/framework/Shareable;;
			select()Z;
			process(Ljavacard/framework/APDU;)V;
		}

		.packageMethodTable 0 {
			verify(Ljavacard/framework/APDU;)V;
		}

		.method protected <init>()V 0 {
			.stack 5;
			.locals 1;

				L0:	aload_0;
					invokespecial 5;		// javacard/framework/Applet.<init>()V
					aload_0;
					sspush 25344;
					putfield_s 0;		// short applet/TheApplet.SW_VERIFICATION_FAILED
					aload_0;
					sspush 25345;
					putfield_s 1;		// short applet/TheApplet.SW_PIN_VERIFICATION_REQUIRED
					sconst_4;
					newarray 11;
					dup;
					sconst_0;
					bspush 48;
					bastore;
					dup;
					sconst_1;
					bspush 48;
					bastore;
					dup;
					sconst_2;
					bspush 48;
					bastore;
					dup;
					sconst_3;
					bspush 48;
					bastore;
					astore_1;
					aload_0;
					new 3;		// javacard/framework/OwnerPIN
					dup;
					sconst_3;
					bspush 8;
					invokespecial 4;		// javacard/framework/OwnerPIN.<init>(BB)V
					putfield_a 2;		// reference applet/TheApplet.pin
					getfield_a_this 2;		// reference applet/TheApplet.pin
					aload_1;
					sconst_0;
					sconst_4;
					invokevirtual 6;		// javacard/framework/OwnerPIN.update([BSB)V
					aload_0;
					invokevirtual 7;		// javacard/framework/Applet.register()V
					return;
		}

		.method public static install([BSB)V 1 {
			.stack 2;
			.locals 0;

				L0:	new 8;		// applet/TheApplet
					dup;
					invokespecial 9;		// applet/TheApplet.<init>()V
					pop;
					return;
		}

		.method public select()Z 6 {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 2;		// reference applet/TheApplet.pin
					invokevirtual 10;		// javacard/framework/OwnerPIN.getTriesRemaining()B
					ifne L2;
				L1:	sconst_0;
					sreturn;
				L2:	sconst_1;
					sreturn;
		}

		.method public deselect()V 4 {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 2;		// reference applet/TheApplet.pin
					invokevirtual 11;		// javacard/framework/OwnerPIN.reset()V
					return;
		}

		.method  verify(Ljavacard/framework/APDU;)V 128 {
			.stack 5;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 12;		// javacard/framework/APDU.setIncomingAndReceive()S
					pop;
					aload_1;
					invokevirtual 13;		// javacard/framework/APDU.getBuffer()[B
					astore_2;
					getfield_a_this 2;		// reference applet/TheApplet.pin
					aload_2;
					sconst_5;
					aload_2;
					sconst_4;
					baload;
					invokevirtual 14;		// javacard/framework/OwnerPIN.check([BSB)Z
					ifne L2;
				L1:	getfield_s_this 0;		// short applet/TheApplet.SW_VERIFICATION_FAILED
					invokestatic 15;		// javacard/framework/ISOException.throwIt(S)V
				L2:	return;
		}

		.method public process(Ljavacard/framework/APDU;)V 7 {
			.stack 6;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 13;		// javacard/framework/APDU.getBuffer()[B
					astore_2;
					aload_2;
					sconst_1;
					baload;
					slookupswitch L9 4 -92 L1 -80 L2 -48 L5 32 L8;
				L1:	return;
				L2:	getfield_a_this 2;		// reference applet/TheApplet.pin
					invokevirtual 16;		// javacard/framework/OwnerPIN.isValidated()Z
					ifne L4;
				L3:	getfield_s_this 1;		// short applet/TheApplet.SW_PIN_VERIFICATION_REQUIRED
					invokestatic 15;		// javacard/framework/ISOException.throwIt(S)V
				L4:	getstatic_a 17;		// reference applet/TheApplet.NVR
					sconst_0;
					aload_2;
					sconst_0;
					aload_2;
					sconst_4;
					baload;
					invokestatic 18;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					aload_1;
					sconst_0;
					aload_2;
					sconst_4;
					baload;
					invokevirtual 19;		// javacard/framework/APDU.setOutgoingAndSend(SS)V
					goto L10;
				L5:	getfield_a_this 2;		// reference applet/TheApplet.pin
					invokevirtual 16;		// javacard/framework/OwnerPIN.isValidated()Z
					ifne L7;
				L6:	getfield_s_this 1;		// short applet/TheApplet.SW_PIN_VERIFICATION_REQUIRED
					invokestatic 15;		// javacard/framework/ISOException.throwIt(S)V
				L7:	aload_1;
					invokevirtual 12;		// javacard/framework/APDU.setIncomingAndReceive()S
					pop;
					aload_2;
					sconst_5;
					getstatic_a 17;		// reference applet/TheApplet.NVR
					sconst_0;
					aload_2;
					sconst_4;
					baload;
					invokestatic 18;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					goto L10;
				L8:	aload_0;
					aload_1;
					invokevirtual 20;		// applet/TheApplet.verify(Ljavacard/framework/APDU;)V
					goto L10;
				L9:	sspush 27904;
					invokestatic 15;		// javacard/framework/ISOException.throwIt(S)V
				L10:	return;
		}

	}

}
